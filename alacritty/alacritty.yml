env:
  TERM: xterm-256color

window:
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 4
    y: 4

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations (full or none)
  decorations: full

  # Background opacity
  opacity: 0.97

  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  startup_mode: Windowed

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Scrolling distance multiplier. (how fast it will scroll)
  multiplier: 10

# Font configuration
font:
  normal:
    family: FiraCode NF
    style: Regular

  bold:
    family: FiraCode NF
    style: Bold

  italic:
    family: FiraCode NF
    style: Italic

  bold_italic:
    family: FiraCode NF
    style: Bold Italic

  size: 10.0 # Point size

# Colors
colors:
  primary:
    background: "#0f111a"
    foreground:
      "#eeffff"

      # Bright and dim foreground colors
      #
      # The dimmed foreground color is calculated automatically if it is not
      # present. If the bright foreground color is not set, or
      # `draw_bold_text_with_bright_colors` is `false`, the normal foreground
      # color will be used.
      #dim_foreground: '#828482'
      #bright_foreground: '#eaeaea'

  # Cursor colors
  #
  # Allowed values are CellForeground/CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.
  cursor:
    text: "#090b10"
    cursor: "#ffcb6b"

  # Selection colors
  #
  # Allowed values are CellForeground/CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.
  selection:
    text: "#ffffff"
    background: "#6f7cbf"

  # Normal colors
  normal:
    black: "#0f111a"
    red: "#ff5370"
    green: "#c3e88d"
    yellow: "#ffcb6b"
    blue: "#82aaff"
    magenta: "#c792ea"
    cyan: "#89ddff"
    white: "#eeffff"

  # Bright colors (here they're the same as normal)
  bright:
    black: "#6d6c6f" # bright black is used for shell command completion
    red: "#ff5370"
    green: "#c3e88d"
    yellow: "#ffcb6b"
    blue: "#82aaff"
    magenta: "#c792ea"
    cyan: "#89ddff"
    white: "#eeffff"

  # Dim colors
  # If the dim colors are not set, they will be calculated automatically based on the `normal` colors.

selection:
  # This string contains all characters that are used as separators for
  # "semantic words" in Alacritty.
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be automatically copied to the primary clipboard
  save_to_clipboard: false

# I leave managing cursor to the shell that I use
cursor:
  # Cursor style
  style:
    # Cursor shape
    # Values for `shape`:
    #   - ▇ Block
    #   - _ Underline
    #   - | Beam
    shape: Beam

# Live config reload (changes require restart)
# enable live reload when alacritty config changes
live_config_reload: true

# Startup directory
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
working_directory: None

mouse:
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

# Key bindings
key_bindings:
  # paste and copy
  - { key: Paste, action: Paste }
  - { key: Copy, action: Copy }

    # scroll up and down
  - { key: PageUp, mods: Shift, mode: ~Alt, action: ScrollPageUp }
  - { key: PageDown, mods: Shift, mode: ~Alt, action: ScrollPageDown }
  - { key: Home, mods: Shift, mode: ~Alt, action: ScrollToTop }
  - { key: End, mods: Shift, mode: ~Alt, action: ScrollToBottom }

    # toggle fullscreen
  - { key: F11, mods: None, action: ToggleFullscreen }

    # resize font
  - { key: Plus, mods: Control, action: IncreaseFontSize }
  - { key: Minus, mods: Control, action: DecreaseFontSize }
  - { key: Key0, mods: Control, action: ResetFontSize }

    # other bindings
  - { key: N, mods: Shift|Control, action: SpawnNewInstance }
